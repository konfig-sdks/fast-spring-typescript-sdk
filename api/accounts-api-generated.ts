/* tslint:disable */
/* eslint-disable */
/*
FastSpring API

The FastSpring API and its supported requests, data, endpoints, and rate limits.

The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include:
- **GET** - request data from your store
- **POST** - send data to your store, such as creating a new product record
- **DELETE** - remove data from your store

The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.

If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).

## Access the API

#### API Credentials and Authentication

FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.

#### Obtain Your API Credentials

1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.

2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.

3. Make a note of the credentials and store them securely.

The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.

## API Requests

**Make all requests to https://api.fastspring.com**

When you make your requests, consider the following:
- Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response.
- FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API. 
- The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests.
- The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header.


The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountsGetByParameterResponse } from '../models';
// @ts-ignore
import { CreateOneAccount } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an account
         * @param {CreateOneAccount} createOneAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAccount: async (createOneAccount: CreateOneAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOneAccount' is not null or undefined
            assertParamExists('createNewAccount', 'createOneAccount', createOneAccount)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createOneAccount,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createOneAccount, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an account
         * @param {string} accountId Account Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountById', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get authenticated account management URL
         * @param {string} accountId Account Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedManagementUrl: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAuthenticatedManagementUrl', 'accountId', accountId)
            const localVarPath = `/accounts/{account_id}/authenticate`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}/authenticate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If no parameters are sent, the operation will return a list of accountIDs.
         * @summary Get all accounts or Search for accounts by parameter
         * @param {string} [email] Account email
         * @param {string} [custom] Account custom key
         * @param {string} [global] Account global key
         * @param {string} [orderID] Order id
         * @param {string} [orderReference] Order Reference
         * @param {string} [subscriptionId] Subscription ID
         * @param {string} [products] Product ID
         * @param {string} [subscriptions] \&quot;active\&quot;, \&quot;ended\&quot;, \&quot;canceled\&quot;, \&quot;started\&quot; will return accounts with subscriptions in the corresponding state
         * @param {string} [refunds] true
         * @param {number} [limit] integer value indicating the maximum number of records to be returned Or, when used together with page, the maximum number of records to be returned per page
         * @param {number} [page] Integer value that must be used in conjunction with limit to specify which page of results should be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByParameter: async (email?: string, custom?: string, global?: string, orderID?: string, orderReference?: string, subscriptionId?: string, products?: string, subscriptions?: string, refunds?: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (custom !== undefined) {
                localVarQueryParameter['custom'] = custom;
            }

            if (global !== undefined) {
                localVarQueryParameter['global'] = global;
            }

            if (orderID !== undefined) {
                localVarQueryParameter['orderID'] = orderID;
            }

            if (orderReference !== undefined) {
                localVarQueryParameter['orderReference'] = orderReference;
            }

            if (subscriptionId !== undefined) {
                localVarQueryParameter['subscriptionId'] = subscriptionId;
            }

            if (products !== undefined) {
                localVarQueryParameter['products'] = products;
            }

            if (subscriptions !== undefined) {
                localVarQueryParameter['subscriptions'] = subscriptions;
            }

            if (refunds !== undefined) {
                localVarQueryParameter['refunds'] = refunds;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update account
         * @param {string} accountId Account Id
         * @param {CreateOneAccount} createOneAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountById: async (accountId: string, createOneAccount: CreateOneAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateAccountById', 'accountId', accountId)
            // verify required parameter 'createOneAccount' is not null or undefined
            assertParamExists('updateAccountById', 'createOneAccount', createOneAccount)
            const localVarPath = `/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-account_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createOneAccount,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{account_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createOneAccount, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create an account
         * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const createOneAccount: CreateOneAccount = {
                contact: requestParameters.contact
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAccount(createOneAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an account
         * @param {AccountsApiGetAccountByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountById(requestParameters: AccountsApiGetAccountByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountById(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get authenticated account management URL
         * @param {AccountsApiGetAuthenticatedManagementUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedManagementUrl(requestParameters: AccountsApiGetAuthenticatedManagementUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedManagementUrl(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If no parameters are sent, the operation will return a list of accountIDs.
         * @summary Get all accounts or Search for accounts by parameter
         * @param {AccountsApiGetByParameterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByParameter(requestParameters: AccountsApiGetByParameterRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsGetByParameterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByParameter(requestParameters.email, requestParameters.custom, requestParameters.global, requestParameters.orderID, requestParameters.orderReference, requestParameters.subscriptionId, requestParameters.products, requestParameters.subscriptions, requestParameters.refunds, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update account
         * @param {AccountsApiUpdateAccountByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountById(requestParameters: AccountsApiUpdateAccountByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const createOneAccount: CreateOneAccount = {
                contact: requestParameters.contact
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccountById(requestParameters.accountId, createOneAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create an account
         * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createNewAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an account
         * @param {AccountsApiGetAccountByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById(requestParameters: AccountsApiGetAccountByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAccountById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get authenticated account management URL
         * @param {AccountsApiGetAuthenticatedManagementUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedManagementUrl(requestParameters: AccountsApiGetAuthenticatedManagementUrlRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAuthenticatedManagementUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * If no parameters are sent, the operation will return a list of accountIDs.
         * @summary Get all accounts or Search for accounts by parameter
         * @param {AccountsApiGetByParameterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByParameter(requestParameters: AccountsApiGetByParameterRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountsGetByParameterResponse> {
            return localVarFp.getByParameter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update account
         * @param {AccountsApiUpdateAccountByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountById(requestParameters: AccountsApiUpdateAccountByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateAccountById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiCreateNewAccountRequest
 */
export type AccountsApiCreateNewAccountRequest = {
    
} & CreateOneAccount

/**
 * Request parameters for getAccountById operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountByIdRequest
 */
export type AccountsApiGetAccountByIdRequest = {
    
    /**
    * Account Id
    * @type {string}
    * @memberof AccountsApiGetAccountById
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getAuthenticatedManagementUrl operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAuthenticatedManagementUrlRequest
 */
export type AccountsApiGetAuthenticatedManagementUrlRequest = {
    
    /**
    * Account Id
    * @type {string}
    * @memberof AccountsApiGetAuthenticatedManagementUrl
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getByParameter operation in AccountsApi.
 * @export
 * @interface AccountsApiGetByParameterRequest
 */
export type AccountsApiGetByParameterRequest = {
    
    /**
    * Account email
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly email?: string
    
    /**
    * Account custom key
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly custom?: string
    
    /**
    * Account global key
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly global?: string
    
    /**
    * Order id
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly orderID?: string
    
    /**
    * Order Reference
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly orderReference?: string
    
    /**
    * Subscription ID
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly subscriptionId?: string
    
    /**
    * Product ID
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly products?: string
    
    /**
    * \"active\", \"ended\", \"canceled\", \"started\" will return accounts with subscriptions in the corresponding state
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly subscriptions?: string
    
    /**
    * true
    * @type {string}
    * @memberof AccountsApiGetByParameter
    */
    readonly refunds?: string
    
    /**
    * integer value indicating the maximum number of records to be returned Or, when used together with page, the maximum number of records to be returned per page
    * @type {number}
    * @memberof AccountsApiGetByParameter
    */
    readonly limit?: number
    
    /**
    * Integer value that must be used in conjunction with limit to specify which page of results should be returned
    * @type {number}
    * @memberof AccountsApiGetByParameter
    */
    readonly page?: number
    
}

/**
 * Request parameters for updateAccountById operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountByIdRequest
 */
export type AccountsApiUpdateAccountByIdRequest = {
    
    /**
    * Account Id
    * @type {string}
    * @memberof AccountsApiUpdateAccountById
    */
    readonly accountId: string
    
} & CreateOneAccount

/**
 * AccountsApiGenerated - object-oriented interface
 * @export
 * @class AccountsApiGenerated
 * @extends {BaseAPI}
 */
export class AccountsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create an account
     * @param {AccountsApiCreateNewAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public createNewAccount(requestParameters: AccountsApiCreateNewAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).createNewAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an account
     * @param {AccountsApiGetAccountByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getAccountById(requestParameters: AccountsApiGetAccountByIdRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccountById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get authenticated account management URL
     * @param {AccountsApiGetAuthenticatedManagementUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getAuthenticatedManagementUrl(requestParameters: AccountsApiGetAuthenticatedManagementUrlRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAuthenticatedManagementUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If no parameters are sent, the operation will return a list of accountIDs.
     * @summary Get all accounts or Search for accounts by parameter
     * @param {AccountsApiGetByParameterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getByParameter(requestParameters: AccountsApiGetByParameterRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getByParameter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update account
     * @param {AccountsApiUpdateAccountByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public updateAccountById(requestParameters: AccountsApiUpdateAccountByIdRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).updateAccountById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
