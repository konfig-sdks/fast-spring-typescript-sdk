/* tslint:disable */
/* eslint-disable */
/*
FastSpring API

The FastSpring API and its supported requests, data, endpoints, and rate limits.

The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include:
- **GET** - request data from your store
- **POST** - send data to your store, such as creating a new product record
- **DELETE** - remove data from your store

The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.

If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).

## Access the API

#### API Credentials and Authentication

FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.

#### Obtain Your API Credentials

1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.

2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.

3. Make a note of the credentials and store them securely.

The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.

## API Requests

**Make all requests to https://api.fastspring.com**

When you make your requests, consider the following:
- Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response.
- FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API. 
- The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests.
- The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header.


The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrdersUpdateTagsAndAttributesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get orders by date range
         * @param {string} beginDate filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be MM/DD/YY
         * @param {string} endDate filters results to include transactions before the specified end date, the format must be MM/DD/YY
         * @param {number} limit integer limits the number of order records returned per page (default is 50 records)
         * @param {number} page specifies page number of results to be returned; used together with limit to control pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDateRange: async (beginDate: string, endDate: string, limit: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beginDate' is not null or undefined
            assertParamExists('getByDateRange', 'beginDate', beginDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getByDateRange', 'endDate', endDate)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getByDateRange', 'limit', limit)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getByDateRange', 'page', page)
            const localVarPath = `/orders?begin={begin_date}&end={end_date}&limit={limit}&page={page}`
                .replace(`{${"begin_date"}}`, encodeURIComponent(String(beginDate !== undefined ? beginDate : `-begin_date-`)))
                .replace(`{${"end_date"}}`, encodeURIComponent(String(endDate !== undefined ? endDate : `-end_date-`)))
                .replace(`{${"limit"}}`, encodeURIComponent(String(limit !== undefined ? limit : `-limit-`)))
                .replace(`{${"page"}}`, encodeURIComponent(String(page !== undefined ? page : `-page-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orders?begin={begin_date}&end={end_date}&limit={limit}&page={page}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get orders by end date
         * @param {string} endDate filters results to include transactions before the specified end date, the format must be MM/DD/YY
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEndDate: async (endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getByEndDate', 'endDate', endDate)
            const localVarPath = `/orders?end={end_date}`
                .replace(`{${"end_date"}}`, encodeURIComponent(String(endDate !== undefined ? endDate : `-end_date-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orders?end={end_date}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get orders by ID
         * @param {string} orderId Order Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getById', 'orderId', orderId)
            const localVarPath = `/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orders/{order_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get orders by product path
         * @param {string} productPath Product path
         * @param {number} limit integer limits the number of order records returned per page (default is 50 records)
         * @param {number} page specifies page number of results to be returned; used together with limit to control pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProductPath: async (productPath: string, limit: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productPath' is not null or undefined
            assertParamExists('getByProductPath', 'productPath', productPath)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getByProductPath', 'limit', limit)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getByProductPath', 'page', page)
            const localVarPath = `/orders?products={product_path}&limit={limit}&page={page}`
                .replace(`{${"product_path"}}`, encodeURIComponent(String(productPath !== undefined ? productPath : `-product_path-`)))
                .replace(`{${"limit"}}`, encodeURIComponent(String(limit !== undefined ? limit : `-limit-`)))
                .replace(`{${"page"}}`, encodeURIComponent(String(page !== undefined ? page : `-page-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orders?products={product_path}&limit={limit}&page={page}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get orders by product path AND date range
         * @param {string} productPath Product path
         * @param {string} beginDate filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be yyyy-mm-dd
         * @param {string} endDate filters results to include transactions before the specified end date, the format must be yyyy-mm-dd
         * @param {number} [limit] integer limits the number of order records returned per page (default is 50 records)
         * @param {number} [page] specifies page number of results to be returned; used together with limit to control pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProductPathAndDateRange: async (productPath: string, beginDate: string, endDate: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productPath' is not null or undefined
            assertParamExists('getByProductPathAndDateRange', 'productPath', productPath)
            // verify required parameter 'beginDate' is not null or undefined
            assertParamExists('getByProductPathAndDateRange', 'beginDate', beginDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getByProductPathAndDateRange', 'endDate', endDate)
            const localVarPath = `/orders?products={product_path}&begin={begin_date}&end={end_date}`
                .replace(`{${"product_path"}}`, encodeURIComponent(String(productPath !== undefined ? productPath : `-product_path-`)))
                .replace(`{${"begin_date"}}`, encodeURIComponent(String(beginDate !== undefined ? beginDate : `-begin_date-`)))
                .replace(`{${"end_date"}}`, encodeURIComponent(String(endDate !== undefined ? endDate : `-end_date-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orders?products={product_path}&begin={begin_date}&end={end_date}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get orders with returns only
         * @param {string} beginDate filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be MM/DD/YY
         * @param {string} endDate filters results to include transactions before the specified end date, the format must be MM/DD/YY
         * @param {boolean} return 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersWithReturns: async (beginDate: string, endDate: string, return: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beginDate' is not null or undefined
            assertParamExists('getOrdersWithReturns', 'beginDate', beginDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getOrdersWithReturns', 'endDate', endDate)
            // verify required parameter 'return' is not null or undefined
            assertParamExists('getOrdersWithReturns', 'return', return)
            const localVarPath = `/orders?begin={begin_date}&end={end_date}&returns={return}`
                .replace(`{${"begin_date"}}`, encodeURIComponent(String(beginDate !== undefined ? beginDate : `-begin_date-`)))
                .replace(`{${"end_date"}}`, encodeURIComponent(String(endDate !== undefined ? endDate : `-end_date-`)))
                .replace(`{${"return"}}`, encodeURIComponent(String(return !== undefined ? return : `-return-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orders?begin={begin_date}&end={end_date}&returns={return}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update order tags and attributes
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTagsAndAttributes: async (body: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateTagsAndAttributes', 'body', body)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get orders by date range
         * @param {OrdersApiGetByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByDateRange(requestParameters: OrdersApiGetByDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByDateRange(requestParameters.beginDate, requestParameters.endDate, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get orders by end date
         * @param {OrdersApiGetByEndDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEndDate(requestParameters: OrdersApiGetByEndDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEndDate(requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get orders by ID
         * @param {OrdersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: OrdersApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get orders by product path
         * @param {OrdersApiGetByProductPathRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByProductPath(requestParameters: OrdersApiGetByProductPathRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByProductPath(requestParameters.productPath, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get orders by product path AND date range
         * @param {OrdersApiGetByProductPathAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByProductPathAndDateRange(requestParameters: OrdersApiGetByProductPathAndDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByProductPathAndDateRange(requestParameters.productPath, requestParameters.beginDate, requestParameters.endDate, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get orders with returns only
         * @param {OrdersApiGetOrdersWithReturnsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdersWithReturns(requestParameters: OrdersApiGetOrdersWithReturnsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdersWithReturns(requestParameters.beginDate, requestParameters.endDate, requestParameters.return, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update order tags and attributes
         * @param {OrdersApiUpdateTagsAndAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTagsAndAttributes(requestParameters: OrdersApiUpdateTagsAndAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersUpdateTagsAndAttributesResponse>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTagsAndAttributes(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Get orders by date range
         * @param {OrdersApiGetByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDateRange(requestParameters: OrdersApiGetByDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get orders by end date
         * @param {OrdersApiGetByEndDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEndDate(requestParameters: OrdersApiGetByEndDateRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByEndDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get orders by ID
         * @param {OrdersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: OrdersApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get orders by product path
         * @param {OrdersApiGetByProductPathRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProductPath(requestParameters: OrdersApiGetByProductPathRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByProductPath(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get orders by product path AND date range
         * @param {OrdersApiGetByProductPathAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProductPathAndDateRange(requestParameters: OrdersApiGetByProductPathAndDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByProductPathAndDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get orders with returns only
         * @param {OrdersApiGetOrdersWithReturnsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersWithReturns(requestParameters: OrdersApiGetOrdersWithReturnsRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getOrdersWithReturns(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update order tags and attributes
         * @param {OrdersApiUpdateTagsAndAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTagsAndAttributes(requestParameters: OrdersApiUpdateTagsAndAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<OrdersUpdateTagsAndAttributesResponse> {
            return localVarFp.updateTagsAndAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByDateRange operation in OrdersApi.
 * @export
 * @interface OrdersApiGetByDateRangeRequest
 */
export type OrdersApiGetByDateRangeRequest = {
    
    /**
    * filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be MM/DD/YY
    * @type {string}
    * @memberof OrdersApiGetByDateRange
    */
    readonly beginDate: string
    
    /**
    * filters results to include transactions before the specified end date, the format must be MM/DD/YY
    * @type {string}
    * @memberof OrdersApiGetByDateRange
    */
    readonly endDate: string
    
    /**
    * integer limits the number of order records returned per page (default is 50 records)
    * @type {number}
    * @memberof OrdersApiGetByDateRange
    */
    readonly limit: number
    
    /**
    * specifies page number of results to be returned; used together with limit to control pagination
    * @type {number}
    * @memberof OrdersApiGetByDateRange
    */
    readonly page: number
    
}

/**
 * Request parameters for getByEndDate operation in OrdersApi.
 * @export
 * @interface OrdersApiGetByEndDateRequest
 */
export type OrdersApiGetByEndDateRequest = {
    
    /**
    * filters results to include transactions before the specified end date, the format must be MM/DD/YY
    * @type {string}
    * @memberof OrdersApiGetByEndDate
    */
    readonly endDate: string
    
}

/**
 * Request parameters for getById operation in OrdersApi.
 * @export
 * @interface OrdersApiGetByIdRequest
 */
export type OrdersApiGetByIdRequest = {
    
    /**
    * Order Id
    * @type {string}
    * @memberof OrdersApiGetById
    */
    readonly orderId: string
    
}

/**
 * Request parameters for getByProductPath operation in OrdersApi.
 * @export
 * @interface OrdersApiGetByProductPathRequest
 */
export type OrdersApiGetByProductPathRequest = {
    
    /**
    * Product path
    * @type {string}
    * @memberof OrdersApiGetByProductPath
    */
    readonly productPath: string
    
    /**
    * integer limits the number of order records returned per page (default is 50 records)
    * @type {number}
    * @memberof OrdersApiGetByProductPath
    */
    readonly limit: number
    
    /**
    * specifies page number of results to be returned; used together with limit to control pagination
    * @type {number}
    * @memberof OrdersApiGetByProductPath
    */
    readonly page: number
    
}

/**
 * Request parameters for getByProductPathAndDateRange operation in OrdersApi.
 * @export
 * @interface OrdersApiGetByProductPathAndDateRangeRequest
 */
export type OrdersApiGetByProductPathAndDateRangeRequest = {
    
    /**
    * Product path
    * @type {string}
    * @memberof OrdersApiGetByProductPathAndDateRange
    */
    readonly productPath: string
    
    /**
    * filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be yyyy-mm-dd
    * @type {string}
    * @memberof OrdersApiGetByProductPathAndDateRange
    */
    readonly beginDate: string
    
    /**
    * filters results to include transactions before the specified end date, the format must be yyyy-mm-dd
    * @type {string}
    * @memberof OrdersApiGetByProductPathAndDateRange
    */
    readonly endDate: string
    
    /**
    * integer limits the number of order records returned per page (default is 50 records)
    * @type {number}
    * @memberof OrdersApiGetByProductPathAndDateRange
    */
    readonly limit?: number
    
    /**
    * specifies page number of results to be returned; used together with limit to control pagination
    * @type {number}
    * @memberof OrdersApiGetByProductPathAndDateRange
    */
    readonly page?: number
    
}

/**
 * Request parameters for getOrdersWithReturns operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrdersWithReturnsRequest
 */
export type OrdersApiGetOrdersWithReturnsRequest = {
    
    /**
    * filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be MM/DD/YY
    * @type {string}
    * @memberof OrdersApiGetOrdersWithReturns
    */
    readonly beginDate: string
    
    /**
    * filters results to include transactions before the specified end date, the format must be MM/DD/YY
    * @type {string}
    * @memberof OrdersApiGetOrdersWithReturns
    */
    readonly endDate: string
    
    /**
    * 
    * @type {boolean}
    * @memberof OrdersApiGetOrdersWithReturns
    */
    readonly return: boolean
    
}

/**
 * Request parameters for updateTagsAndAttributes operation in OrdersApi.
 * @export
 * @interface OrdersApiUpdateTagsAndAttributesRequest
 */
export type OrdersApiUpdateTagsAndAttributesRequest = any

/**
 * OrdersApiGenerated - object-oriented interface
 * @export
 * @class OrdersApiGenerated
 * @extends {BaseAPI}
 */
export class OrdersApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get orders by date range
     * @param {OrdersApiGetByDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public getByDateRange(requestParameters: OrdersApiGetByDateRangeRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getByDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get orders by end date
     * @param {OrdersApiGetByEndDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public getByEndDate(requestParameters: OrdersApiGetByEndDateRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getByEndDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get orders by ID
     * @param {OrdersApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public getById(requestParameters: OrdersApiGetByIdRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get orders by product path
     * @param {OrdersApiGetByProductPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public getByProductPath(requestParameters: OrdersApiGetByProductPathRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getByProductPath(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get orders by product path AND date range
     * @param {OrdersApiGetByProductPathAndDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public getByProductPathAndDateRange(requestParameters: OrdersApiGetByProductPathAndDateRangeRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getByProductPathAndDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get orders with returns only
     * @param {OrdersApiGetOrdersWithReturnsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public getOrdersWithReturns(requestParameters: OrdersApiGetOrdersWithReturnsRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrdersWithReturns(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update order tags and attributes
     * @param {OrdersApiUpdateTagsAndAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public updateTagsAndAttributes(requestParameters: OrdersApiUpdateTagsAndAttributesRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).updateTagsAndAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
