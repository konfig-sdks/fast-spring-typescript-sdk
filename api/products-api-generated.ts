/* tslint:disable */
/* eslint-disable */
/*
FastSpring API

The FastSpring API and its supported requests, data, endpoints, and rate limits.

The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include:
- **GET** - request data from your store
- **POST** - send data to your store, such as creating a new product record
- **DELETE** - remove data from your store

The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.

If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).

## Access the API

#### API Credentials and Authentication

FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.

#### Obtain Your API Credentials

1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.

2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.

3. Make a note of the credentials and store them securely.

The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.

## API Requests

**Make all requests to https://api.fastspring.com**

When you make your requests, consider the following:
- Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response.
- FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API. 
- The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests.
- The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header.


The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateoneormorenewproductsRequest } from '../models';
// @ts-ignore
import { Product } from '../models';
// @ts-ignore
import { ProductsCreateAndUpdateResponse } from '../models';
// @ts-ignore
import { ProductsCreateOrUpdateOffersResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create and update products
         * @param {CreateoneormorenewproductsRequest} createoneormorenewproductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndUpdate: async (createoneormorenewproductsRequest: CreateoneormorenewproductsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createoneormorenewproductsRequest' is not null or undefined
            assertParamExists('createAndUpdate', 'createoneormorenewproductsRequest', createoneormorenewproductsRequest)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createoneormorenewproductsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createoneormorenewproductsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create or Update Product offers
         * @param {string} productPath Product path
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateOffers: async (productPath: string, body: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productPath' is not null or undefined
            assertParamExists('createOrUpdateOffers', 'productPath', productPath)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createOrUpdateOffers', 'body', body)
            const localVarPath = `/products/offers/{product_path}`
                .replace(`{${"product_path"}}`, encodeURIComponent(String(productPath !== undefined ? productPath : `-product_path-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/offers/{product_path}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete products
         * @param {string} id Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProductById', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all offers for a product by offer type
         * @param {string} productPath Product path
         * @param {string} [type] Offer Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffersByType: async (productPath: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productPath' is not null or undefined
            assertParamExists('getAllOffersByType', 'productPath', productPath)
            const localVarPath = `/products/offers/{product_path}`
                .replace(`{${"product_path"}}`, encodeURIComponent(String(productPath !== undefined ? productPath : `-product_path-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/offers/{product_path}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all product IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductIds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all product prices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductPrices: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/price',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all product prices in specified country
         * @param {string} country Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductPricesByCountry: async (country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getAllProductPricesByCountry', 'country', country)
            const localVarPath = `/products/price?country={country}`
                .replace(`{${"country"}}`, encodeURIComponent(String(country !== undefined ? country : `-country-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/price?country={country}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all product prices in specified country and currency
         * @param {string} country Country code
         * @param {string} currency Currency code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductPricesByCountryAndCurrency: async (country: string, currency: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getAllProductPricesByCountryAndCurrency', 'country', country)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('getAllProductPricesByCountryAndCurrency', 'currency', currency)
            const localVarPath = `/products/price?country={country}&currency={currency}`
                .replace(`{${"country"}}`, encodeURIComponent(String(country !== undefined ? country : `-country-`)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency !== undefined ? currency : `-currency-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/price?country={country}&currency={currency}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get products by path
         * @param {string} productPath Product path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProductPath: async (productPath: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productPath' is not null or undefined
            assertParamExists('getByProductPath', 'productPath', productPath)
            const localVarPath = `/products/{product_path}`
                .replace(`{${"product_path"}}`, encodeURIComponent(String(productPath !== undefined ? productPath : `-product_path-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/{product_path}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a product price
         * @param {string} id Product Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPriceById', 'id', id)
            const localVarPath = `/products/price/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/price/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a product price in a specified country
         * @param {string} id Product Id
         * @param {string} country country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPriceByCountry: async (id: string, country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductPriceByCountry', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getProductPriceByCountry', 'country', country)
            const localVarPath = `/products/price/{id}?country={country}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"country"}}`, encodeURIComponent(String(country !== undefined ? country : `-country-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/price/{id}?country={country}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a product price in a specified country and currency
         * @param {string} id Product Id
         * @param {string} country Country code
         * @param {string} currency currency code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPriceByCountryAndCurrency: async (id: string, country: string, currency: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductPriceByCountryAndCurrency', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getProductPriceByCountryAndCurrency', 'country', country)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('getProductPriceByCountryAndCurrency', 'currency', currency)
            const localVarPath = `/products/price/{id}?country={country}&currency={currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"country"}}`, encodeURIComponent(String(country !== undefined ? country : `-country-`)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency !== undefined ? currency : `-currency-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/price/{id}?country={country}&currency={currency}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create and update products
         * @param {ProductsApiCreateAndUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndUpdate(requestParameters: ProductsApiCreateAndUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsCreateAndUpdateResponse>> {
            const createoneormorenewproductsRequest: CreateoneormorenewproductsRequest = {
                products: requestParameters.products
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndUpdate(createoneormorenewproductsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create or Update Product offers
         * @param {ProductsApiCreateOrUpdateOffersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateOffers(requestParameters: ProductsApiCreateOrUpdateOffersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsCreateOrUpdateOffersResponse>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdateOffers(requestParameters.productPath, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete products
         * @param {ProductsApiDeleteProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductById(requestParameters: ProductsApiDeleteProductByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all offers for a product by offer type
         * @param {ProductsApiGetAllOffersByTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOffersByType(requestParameters: ProductsApiGetAllOffersByTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOffersByType(requestParameters.productPath, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all product IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProductIds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProductIds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all product prices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProductPrices(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProductPrices(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all product prices in specified country
         * @param {ProductsApiGetAllProductPricesByCountryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProductPricesByCountry(requestParameters: ProductsApiGetAllProductPricesByCountryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProductPricesByCountry(requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all product prices in specified country and currency
         * @param {ProductsApiGetAllProductPricesByCountryAndCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProductPricesByCountryAndCurrency(requestParameters: ProductsApiGetAllProductPricesByCountryAndCurrencyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProductPricesByCountryAndCurrency(requestParameters.country, requestParameters.currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get products by path
         * @param {ProductsApiGetByProductPathRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByProductPath(requestParameters: ProductsApiGetByProductPathRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByProductPath(requestParameters.productPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a product price
         * @param {ProductsApiGetPriceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPriceById(requestParameters: ProductsApiGetPriceByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPriceById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a product price in a specified country
         * @param {ProductsApiGetProductPriceByCountryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductPriceByCountry(requestParameters: ProductsApiGetProductPriceByCountryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductPriceByCountry(requestParameters.id, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a product price in a specified country and currency
         * @param {ProductsApiGetProductPriceByCountryAndCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductPriceByCountryAndCurrency(requestParameters: ProductsApiGetProductPriceByCountryAndCurrencyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductPriceByCountryAndCurrency(requestParameters.id, requestParameters.country, requestParameters.currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create and update products
         * @param {ProductsApiCreateAndUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndUpdate(requestParameters: ProductsApiCreateAndUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ProductsCreateAndUpdateResponse> {
            return localVarFp.createAndUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create or Update Product offers
         * @param {ProductsApiCreateOrUpdateOffersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateOffers(requestParameters: ProductsApiCreateOrUpdateOffersRequest, options?: AxiosRequestConfig): AxiosPromise<ProductsCreateOrUpdateOffersResponse> {
            return localVarFp.createOrUpdateOffers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete products
         * @param {ProductsApiDeleteProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductById(requestParameters: ProductsApiDeleteProductByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteProductById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all offers for a product by offer type
         * @param {ProductsApiGetAllOffersByTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOffersByType(requestParameters: ProductsApiGetAllOffersByTypeRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAllOffersByType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all product IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductIds(options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAllProductIds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all product prices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductPrices(options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAllProductPrices(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all product prices in specified country
         * @param {ProductsApiGetAllProductPricesByCountryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductPricesByCountry(requestParameters: ProductsApiGetAllProductPricesByCountryRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAllProductPricesByCountry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all product prices in specified country and currency
         * @param {ProductsApiGetAllProductPricesByCountryAndCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductPricesByCountryAndCurrency(requestParameters: ProductsApiGetAllProductPricesByCountryAndCurrencyRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAllProductPricesByCountryAndCurrency(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get products by path
         * @param {ProductsApiGetByProductPathRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProductPath(requestParameters: ProductsApiGetByProductPathRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByProductPath(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a product price
         * @param {ProductsApiGetPriceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceById(requestParameters: ProductsApiGetPriceByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getPriceById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a product price in a specified country
         * @param {ProductsApiGetProductPriceByCountryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPriceByCountry(requestParameters: ProductsApiGetProductPriceByCountryRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getProductPriceByCountry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a product price in a specified country and currency
         * @param {ProductsApiGetProductPriceByCountryAndCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPriceByCountryAndCurrency(requestParameters: ProductsApiGetProductPriceByCountryAndCurrencyRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getProductPriceByCountryAndCurrency(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAndUpdate operation in ProductsApi.
 * @export
 * @interface ProductsApiCreateAndUpdateRequest
 */
export type ProductsApiCreateAndUpdateRequest = {
    
} & CreateoneormorenewproductsRequest

/**
 * Request parameters for createOrUpdateOffers operation in ProductsApi.
 * @export
 * @interface ProductsApiCreateOrUpdateOffersRequest
 */
export type ProductsApiCreateOrUpdateOffersRequest = {
    
    /**
    * Product path
    * @type {string}
    * @memberof ProductsApiCreateOrUpdateOffers
    */
    readonly productPath: string
    
} & any

/**
 * Request parameters for deleteProductById operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductByIdRequest
 */
export type ProductsApiDeleteProductByIdRequest = {
    
    /**
    * Product Id
    * @type {string}
    * @memberof ProductsApiDeleteProductById
    */
    readonly id: string
    
}

/**
 * Request parameters for getAllOffersByType operation in ProductsApi.
 * @export
 * @interface ProductsApiGetAllOffersByTypeRequest
 */
export type ProductsApiGetAllOffersByTypeRequest = {
    
    /**
    * Product path
    * @type {string}
    * @memberof ProductsApiGetAllOffersByType
    */
    readonly productPath: string
    
    /**
    * Offer Type
    * @type {string}
    * @memberof ProductsApiGetAllOffersByType
    */
    readonly type?: string
    
}

/**
 * Request parameters for getAllProductPricesByCountry operation in ProductsApi.
 * @export
 * @interface ProductsApiGetAllProductPricesByCountryRequest
 */
export type ProductsApiGetAllProductPricesByCountryRequest = {
    
    /**
    * Country code
    * @type {string}
    * @memberof ProductsApiGetAllProductPricesByCountry
    */
    readonly country: string
    
}

/**
 * Request parameters for getAllProductPricesByCountryAndCurrency operation in ProductsApi.
 * @export
 * @interface ProductsApiGetAllProductPricesByCountryAndCurrencyRequest
 */
export type ProductsApiGetAllProductPricesByCountryAndCurrencyRequest = {
    
    /**
    * Country code
    * @type {string}
    * @memberof ProductsApiGetAllProductPricesByCountryAndCurrency
    */
    readonly country: string
    
    /**
    * Currency code
    * @type {string}
    * @memberof ProductsApiGetAllProductPricesByCountryAndCurrency
    */
    readonly currency: string
    
}

/**
 * Request parameters for getByProductPath operation in ProductsApi.
 * @export
 * @interface ProductsApiGetByProductPathRequest
 */
export type ProductsApiGetByProductPathRequest = {
    
    /**
    * Product path
    * @type {string}
    * @memberof ProductsApiGetByProductPath
    */
    readonly productPath: string
    
}

/**
 * Request parameters for getPriceById operation in ProductsApi.
 * @export
 * @interface ProductsApiGetPriceByIdRequest
 */
export type ProductsApiGetPriceByIdRequest = {
    
    /**
    * Product Id
    * @type {string}
    * @memberof ProductsApiGetPriceById
    */
    readonly id: string
    
}

/**
 * Request parameters for getProductPriceByCountry operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductPriceByCountryRequest
 */
export type ProductsApiGetProductPriceByCountryRequest = {
    
    /**
    * Product Id
    * @type {string}
    * @memberof ProductsApiGetProductPriceByCountry
    */
    readonly id: string
    
    /**
    * country code
    * @type {string}
    * @memberof ProductsApiGetProductPriceByCountry
    */
    readonly country: string
    
}

/**
 * Request parameters for getProductPriceByCountryAndCurrency operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductPriceByCountryAndCurrencyRequest
 */
export type ProductsApiGetProductPriceByCountryAndCurrencyRequest = {
    
    /**
    * Product Id
    * @type {string}
    * @memberof ProductsApiGetProductPriceByCountryAndCurrency
    */
    readonly id: string
    
    /**
    * Country code
    * @type {string}
    * @memberof ProductsApiGetProductPriceByCountryAndCurrency
    */
    readonly country: string
    
    /**
    * currency code
    * @type {string}
    * @memberof ProductsApiGetProductPriceByCountryAndCurrency
    */
    readonly currency: string
    
}

/**
 * ProductsApiGenerated - object-oriented interface
 * @export
 * @class ProductsApiGenerated
 * @extends {BaseAPI}
 */
export class ProductsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create and update products
     * @param {ProductsApiCreateAndUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public createAndUpdate(requestParameters: ProductsApiCreateAndUpdateRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).createAndUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create or Update Product offers
     * @param {ProductsApiCreateOrUpdateOffersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public createOrUpdateOffers(requestParameters: ProductsApiCreateOrUpdateOffersRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).createOrUpdateOffers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete products
     * @param {ProductsApiDeleteProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public deleteProductById(requestParameters: ProductsApiDeleteProductByIdRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).deleteProductById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all offers for a product by offer type
     * @param {ProductsApiGetAllOffersByTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getAllOffersByType(requestParameters: ProductsApiGetAllOffersByTypeRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getAllOffersByType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getAllProductIds(options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getAllProductIds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all product prices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getAllProductPrices(options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getAllProductPrices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all product prices in specified country
     * @param {ProductsApiGetAllProductPricesByCountryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getAllProductPricesByCountry(requestParameters: ProductsApiGetAllProductPricesByCountryRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getAllProductPricesByCountry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all product prices in specified country and currency
     * @param {ProductsApiGetAllProductPricesByCountryAndCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getAllProductPricesByCountryAndCurrency(requestParameters: ProductsApiGetAllProductPricesByCountryAndCurrencyRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getAllProductPricesByCountryAndCurrency(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get products by path
     * @param {ProductsApiGetByProductPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getByProductPath(requestParameters: ProductsApiGetByProductPathRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getByProductPath(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a product price
     * @param {ProductsApiGetPriceByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getPriceById(requestParameters: ProductsApiGetPriceByIdRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getPriceById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a product price in a specified country
     * @param {ProductsApiGetProductPriceByCountryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getProductPriceByCountry(requestParameters: ProductsApiGetProductPriceByCountryRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getProductPriceByCountry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a product price in a specified country and currency
     * @param {ProductsApiGetProductPriceByCountryAndCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiGenerated
     */
    public getProductPriceByCountryAndCurrency(requestParameters: ProductsApiGetProductPriceByCountryAndCurrencyRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getProductPriceByCountryAndCurrency(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
