/* tslint:disable */
/* eslint-disable */
/*
FastSpring API

The FastSpring API and its supported requests, data, endpoints, and rate limits.

The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include:
- **GET** - request data from your store
- **POST** - send data to your store, such as creating a new product record
- **DELETE** - remove data from your store

The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.

If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).

## Access the API

#### API Credentials and Authentication

FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.

#### Obtain Your API Credentials

1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.

2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.

3. Make a note of the credentials and store them securely.

The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.

## API Requests

**Make all requests to https://api.fastspring.com**

When you make your requests, consider the following:
- Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response.
- FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API. 
- The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests.
- The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header.


The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddressRequest } from '../models';
// @ts-ignore
import { CollectionModelQuoteResponse } from '../models';
// @ts-ignore
import { ContactRequest } from '../models';
// @ts-ignore
import { CreateQuoteRequest } from '../models';
// @ts-ignore
import { ItemRequest } from '../models';
// @ts-ignore
import { QuoteResponse } from '../models';
// @ts-ignore
import { QuotesUpdateQuoteByIdRequest } from '../models';
// @ts-ignore
import { TagRequest } from '../models';
// @ts-ignore
import { UpdateQuoteRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * QuotesApi - axios parameter creator
 * @export
 */
export const QuotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel a quote
         * @param {string} id A unique identifier for the quote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelQuoteById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelQuoteById', 'id', id)
            const localVarPath = `/quotes/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/quotes/{id}/cancel',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a quote
         * @param {CreateQuoteRequest} createQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewQuote: async (createQuoteRequest: CreateQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createQuoteRequest' is not null or undefined
            assertParamExists('createNewQuote', 'createQuoteRequest', createQuoteRequest)
            const localVarPath = `/quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createQuoteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/quotes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createQuoteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a quote
         * @param {string} id A unique identifier for the quote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuoteById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteQuoteById', 'id', id)
            const localVarPath = `/quotes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/quotes/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all quotes
         * @param {string} [createdBegin] The format must be YYYY-MM-DD
         * @param {string} [createdEnd] The format must be YYYY-MM-DD
         * @param {string} [createdEmail] 
         * @param {string} [expiresBegin] The format must be YYYY-MM-DD
         * @param {string} [expiresEnd] The format must be YYYY-MM-DD
         * @param {string} [searchParam] 
         * @param {string} [expiredBefore] The format must be YYYY-MM-DD
         * @param {boolean} [onlyQuoteId] 
         * @param {Array<string>} [statuses] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuotes: async (createdBegin?: string, createdEnd?: string, createdEmail?: string, expiresBegin?: string, expiresEnd?: string, searchParam?: string, expiredBefore?: string, onlyQuoteId?: boolean, statuses?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (createdBegin !== undefined) {
                localVarQueryParameter['createdBegin'] = (createdBegin as any instanceof Date) ?
                    (createdBegin as any).toISOString() :
                    createdBegin;
            }

            if (createdEnd !== undefined) {
                localVarQueryParameter['createdEnd'] = (createdEnd as any instanceof Date) ?
                    (createdEnd as any).toISOString() :
                    createdEnd;
            }

            if (createdEmail !== undefined) {
                localVarQueryParameter['createdEmail'] = createdEmail;
            }

            if (expiresBegin !== undefined) {
                localVarQueryParameter['expiresBegin'] = (expiresBegin as any instanceof Date) ?
                    (expiresBegin as any).toISOString() :
                    expiresBegin;
            }

            if (expiresEnd !== undefined) {
                localVarQueryParameter['expiresEnd'] = (expiresEnd as any instanceof Date) ?
                    (expiresEnd as any).toISOString() :
                    expiresEnd;
            }

            if (searchParam !== undefined) {
                localVarQueryParameter['searchParam'] = searchParam;
            }

            if (expiredBefore !== undefined) {
                localVarQueryParameter['expiredBefore'] = (expiredBefore as any instanceof Date) ?
                    (expiredBefore as any).toISOString() :
                    expiredBefore;
            }

            if (onlyQuoteId !== undefined) {
                localVarQueryParameter['onlyQuoteId'] = onlyQuoteId;
            }

            if (statuses) {
                localVarQueryParameter['statuses'] = statuses;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/quotes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a quote
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/quotes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/quotes/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a quote
         * @param {string} id A unique identifier for the quote
         * @param {QuotesUpdateQuoteByIdRequest} quotesUpdateQuoteByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuoteById: async (id: string, quotesUpdateQuoteByIdRequest: QuotesUpdateQuoteByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateQuoteById', 'id', id)
            // verify required parameter 'quotesUpdateQuoteByIdRequest' is not null or undefined
            assertParamExists('updateQuoteById', 'quotesUpdateQuoteByIdRequest', quotesUpdateQuoteByIdRequest)
            const localVarPath = `/quotes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: quotesUpdateQuoteByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/quotes/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(quotesUpdateQuoteByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuotesApi - functional programming interface
 * @export
 */
export const QuotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuotesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel a quote
         * @param {QuotesApiCancelQuoteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelQuoteById(requestParameters: QuotesApiCancelQuoteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelQuoteById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a quote
         * @param {QuotesApiCreateNewQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewQuote(requestParameters: QuotesApiCreateNewQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteResponse>> {
            const createQuoteRequest: CreateQuoteRequest = {
                tags: requestParameters.tags,
                coupon: requestParameters.coupon,
                currency: requestParameters.currency,
                expirationDateDays: requestParameters.expirationDateDays,
                fulfillmentTerm: requestParameters.fulfillmentTerm,
                items: requestParameters.items,
                name: requestParameters.name,
                notes: requestParameters.notes,
                netTermsDays: requestParameters.netTermsDays,
                recipientAddress: requestParameters.recipientAddress,
                recipient: requestParameters.recipient,
                taxId: requestParameters.taxId,
                source: requestParameters.source,
                sourceIP: requestParameters.sourceIP
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewQuote(createQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a quote
         * @param {QuotesApiDeleteQuoteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuoteById(requestParameters: QuotesApiDeleteQuoteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuoteById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all quotes
         * @param {QuotesApiGetAllQuotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQuotes(requestParameters: QuotesApiGetAllQuotesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQuotes(requestParameters.createdBegin, requestParameters.createdEnd, requestParameters.createdEmail, requestParameters.expiresBegin, requestParameters.expiresEnd, requestParameters.searchParam, requestParameters.expiredBefore, requestParameters.onlyQuoteId, requestParameters.statuses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a quote
         * @param {QuotesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: QuotesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a quote
         * @param {QuotesApiUpdateQuoteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuoteById(requestParameters: QuotesApiUpdateQuoteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteResponse>> {
            const quotesUpdateQuoteByIdRequest: QuotesUpdateQuoteByIdRequest = {
                updateQuoteRequest: requestParameters.updateQuoteRequest
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuoteById(requestParameters.id, quotesUpdateQuoteByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuotesApi - factory interface
 * @export
 */
export const QuotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuotesApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel a quote
         * @param {QuotesApiCancelQuoteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelQuoteById(requestParameters: QuotesApiCancelQuoteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<QuoteResponse> {
            return localVarFp.cancelQuoteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a quote
         * @param {QuotesApiCreateNewQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewQuote(requestParameters: QuotesApiCreateNewQuoteRequest, options?: AxiosRequestConfig): AxiosPromise<QuoteResponse> {
            return localVarFp.createNewQuote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a quote
         * @param {QuotesApiDeleteQuoteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuoteById(requestParameters: QuotesApiDeleteQuoteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<QuoteResponse> {
            return localVarFp.deleteQuoteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all quotes
         * @param {QuotesApiGetAllQuotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuotes(requestParameters: QuotesApiGetAllQuotesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CollectionModelQuoteResponse> {
            return localVarFp.getAllQuotes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a quote
         * @param {QuotesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: QuotesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<QuoteResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a quote
         * @param {QuotesApiUpdateQuoteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuoteById(requestParameters: QuotesApiUpdateQuoteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<QuoteResponse> {
            return localVarFp.updateQuoteById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelQuoteById operation in QuotesApi.
 * @export
 * @interface QuotesApiCancelQuoteByIdRequest
 */
export type QuotesApiCancelQuoteByIdRequest = {
    
    /**
    * A unique identifier for the quote
    * @type {string}
    * @memberof QuotesApiCancelQuoteById
    */
    readonly id: string
    
}

/**
 * Request parameters for createNewQuote operation in QuotesApi.
 * @export
 * @interface QuotesApiCreateNewQuoteRequest
 */
export type QuotesApiCreateNewQuoteRequest = {
    
} & CreateQuoteRequest

/**
 * Request parameters for deleteQuoteById operation in QuotesApi.
 * @export
 * @interface QuotesApiDeleteQuoteByIdRequest
 */
export type QuotesApiDeleteQuoteByIdRequest = {
    
    /**
    * A unique identifier for the quote
    * @type {string}
    * @memberof QuotesApiDeleteQuoteById
    */
    readonly id: string
    
}

/**
 * Request parameters for getAllQuotes operation in QuotesApi.
 * @export
 * @interface QuotesApiGetAllQuotesRequest
 */
export type QuotesApiGetAllQuotesRequest = {
    
    /**
    * The format must be YYYY-MM-DD
    * @type {string}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly createdBegin?: string
    
    /**
    * The format must be YYYY-MM-DD
    * @type {string}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly createdEnd?: string
    
    /**
    * 
    * @type {string}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly createdEmail?: string
    
    /**
    * The format must be YYYY-MM-DD
    * @type {string}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly expiresBegin?: string
    
    /**
    * The format must be YYYY-MM-DD
    * @type {string}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly expiresEnd?: string
    
    /**
    * 
    * @type {string}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly searchParam?: string
    
    /**
    * The format must be YYYY-MM-DD
    * @type {string}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly expiredBefore?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly onlyQuoteId?: boolean
    
    /**
    * 
    * @type {Array<string>}
    * @memberof QuotesApiGetAllQuotes
    */
    readonly statuses?: Array<string>
    
}

/**
 * Request parameters for getById operation in QuotesApi.
 * @export
 * @interface QuotesApiGetByIdRequest
 */
export type QuotesApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof QuotesApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for updateQuoteById operation in QuotesApi.
 * @export
 * @interface QuotesApiUpdateQuoteByIdRequest
 */
export type QuotesApiUpdateQuoteByIdRequest = {
    
    /**
    * A unique identifier for the quote
    * @type {string}
    * @memberof QuotesApiUpdateQuoteById
    */
    readonly id: string
    
} & QuotesUpdateQuoteByIdRequest

/**
 * QuotesApiGenerated - object-oriented interface
 * @export
 * @class QuotesApiGenerated
 * @extends {BaseAPI}
 */
export class QuotesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Cancel a quote
     * @param {QuotesApiCancelQuoteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApiGenerated
     */
    public cancelQuoteById(requestParameters: QuotesApiCancelQuoteByIdRequest, options?: AxiosRequestConfig) {
        return QuotesApiFp(this.configuration).cancelQuoteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a quote
     * @param {QuotesApiCreateNewQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApiGenerated
     */
    public createNewQuote(requestParameters: QuotesApiCreateNewQuoteRequest, options?: AxiosRequestConfig) {
        return QuotesApiFp(this.configuration).createNewQuote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a quote
     * @param {QuotesApiDeleteQuoteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApiGenerated
     */
    public deleteQuoteById(requestParameters: QuotesApiDeleteQuoteByIdRequest, options?: AxiosRequestConfig) {
        return QuotesApiFp(this.configuration).deleteQuoteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all quotes
     * @param {QuotesApiGetAllQuotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApiGenerated
     */
    public getAllQuotes(requestParameters: QuotesApiGetAllQuotesRequest = {}, options?: AxiosRequestConfig) {
        return QuotesApiFp(this.configuration).getAllQuotes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a quote
     * @param {QuotesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApiGenerated
     */
    public getById(requestParameters: QuotesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return QuotesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a quote
     * @param {QuotesApiUpdateQuoteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApiGenerated
     */
    public updateQuoteById(requestParameters: QuotesApiUpdateQuoteByIdRequest, options?: AxiosRequestConfig) {
        return QuotesApiFp(this.configuration).updateQuoteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
