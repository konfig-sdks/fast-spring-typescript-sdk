/* tslint:disable */
/* eslint-disable */
/*
FastSpring API

The FastSpring API and its supported requests, data, endpoints, and rate limits.

The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include:
- **GET** - request data from your store
- **POST** - send data to your store, such as creating a new product record
- **DELETE** - remove data from your store

The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.

If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).

## Access the API

#### API Credentials and Authentication

FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.

#### Obtain Your API Credentials

1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.

2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.

3. Make a note of the credentials and store them securely.

The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.

## API Requests

**Make all requests to https://api.fastspring.com**

When you make your requests, consider the following:
- Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response.
- FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API. 
- The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests.
- The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header.


The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChangetheproductforanactivesubscriptionRequest } from '../models';
// @ts-ignore
import { EstimateSubscriptionRequest } from '../models';
// @ts-ignore
import { PauseSubscriptionRequest } from '../models';
// @ts-ignore
import { Subscription } from '../models';
// @ts-ignore
import { Subscription6 } from '../models';
// @ts-ignore
import { SubscriptionAddon } from '../models';
// @ts-ignore
import { UncancelasubscriptionpriortodeactivationRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export const SubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel a subscription
         * @param {string} subscriptionId Subscription Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscriptionById: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('cancelSubscriptionById', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscription_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/{subscription_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Convert an Expired Trial Subscription without a Payment Method
         * @param {string} subscriptionId Subscription Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertExpiredTrialWithoutPaymentMethod: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('convertExpiredTrialWithoutPaymentMethod', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}/convert`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscription_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/{subscription_id}/convert',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a subscription
         * @param {string} subscriptionId Subscription Id
         * @param {string} [accountId] specify a specific customer account whose subscriptions you want to retrieve
         * @param {string} [begin] specify the beginning of a date range in yyyy-mm-dd-format
         * @param {string} [end] specify the end of a date range in yyyy-mm-dd format
         * @param {string} [event] In each event, use begin and end to retrieve the corresponding subscriptions
         * @param {string} [products] enter one or more product ids to filter the response to include only subscriptions for the specified products; use commas to separate multiple values
         * @param {string} [scope] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (subscriptionId: string, accountId?: string, begin?: string, end?: string, event?: string, products?: string, scope?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getById', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscription_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (begin !== undefined) {
                localVarQueryParameter['begin'] = begin;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (products !== undefined) {
                localVarQueryParameter['products'] = products;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/{subscription_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription entries
         * @param {string} subscriptionId Subscription Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntries: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getEntries', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}/entries`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscription_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/{subscription_id}/entries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription plan change history
         * @param {string} subscriptionId Subscription Id
         * @param {'base_plan' | 'add_on'} [scope] Type of items to return
         * @param {'increasing' | 'decreasing'} [order] Sort Order for the results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlanChangeHistory: async (subscriptionId: string, scope?: 'base_plan' | 'add_on', order?: 'increasing' | 'decreasing', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getPlanChangeHistory', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}/history`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscription_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/{subscription_id}/history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pause a subscription
         * @param {string} subscriptionId Subscription Id
         * @param {PauseSubscriptionRequest} pauseSubscriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription: async (subscriptionId: string, pauseSubscriptionRequest: PauseSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('pauseSubscription', 'subscriptionId', subscriptionId)
            // verify required parameter 'pauseSubscriptionRequest' is not null or undefined
            assertParamExists('pauseSubscription', 'pauseSubscriptionRequest', pauseSubscriptionRequest)
            const localVarPath = `/subscriptions/{subscription_id}/pause`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscription_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: pauseSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/{subscription_id}/pause',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(pauseSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Preview a proposed prorated plan change
         * @param {EstimateSubscriptionRequest} estimateSubscriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewPlanChange: async (estimateSubscriptionRequest: EstimateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'estimateSubscriptionRequest' is not null or undefined
            assertParamExists('previewPlanChange', 'estimateSubscriptionRequest', estimateSubscriptionRequest)
            const localVarPath = `/subscriptions/estimate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: estimateSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/estimate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(estimateSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rebill a managed subscription
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rebillManagedSubscription: async (body: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rebillManagedSubscription', 'body', body)
            const localVarPath = `/subscriptions/charge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/charge',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a scheduled pause
         * @param {string} subscriptionId Subscription Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeScheduledPause: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('removeScheduledPause', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions/{subscription_id}/resume`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscription_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/{subscription_id}/resume',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resume a canceled subscription
         * @param {string} subscriptionId Subscription Id
         * @param {UncancelasubscriptionpriortodeactivationRequest} uncancelasubscriptionpriortodeactivationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription: async (subscriptionId: string, uncancelasubscriptionpriortodeactivationRequest: UncancelasubscriptionpriortodeactivationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('resumeSubscription', 'subscriptionId', subscriptionId)
            // verify required parameter 'uncancelasubscriptionpriortodeactivationRequest' is not null or undefined
            assertParamExists('resumeSubscription', 'uncancelasubscriptionpriortodeactivationRequest', uncancelasubscriptionpriortodeactivationRequest)
            const localVarPath = `/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscription_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: uncancelasubscriptionpriortodeactivationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions/{subscription_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(uncancelasubscriptionpriortodeactivationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a subscription
         * @param {ChangetheproductforanactivesubscriptionRequest} changetheproductforanactivesubscriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: async (changetheproductforanactivesubscriptionRequest: ChangetheproductforanactivesubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changetheproductforanactivesubscriptionRequest' is not null or undefined
            assertParamExists('updateSubscription', 'changetheproductforanactivesubscriptionRequest', changetheproductforanactivesubscriptionRequest)
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changetheproductforanactivesubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/subscriptions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changetheproductforanactivesubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel a subscription
         * @param {SubscriptionsApiCancelSubscriptionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSubscriptionById(requestParameters: SubscriptionsApiCancelSubscriptionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSubscriptionById(requestParameters.subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Convert an Expired Trial Subscription without a Payment Method
         * @param {SubscriptionsApiConvertExpiredTrialWithoutPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertExpiredTrialWithoutPaymentMethod(requestParameters: SubscriptionsApiConvertExpiredTrialWithoutPaymentMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertExpiredTrialWithoutPaymentMethod(requestParameters.subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubscriptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSubscriptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a subscription
         * @param {SubscriptionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: SubscriptionsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.subscriptionId, requestParameters.accountId, requestParameters.begin, requestParameters.end, requestParameters.event, requestParameters.products, requestParameters.scope, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription entries
         * @param {SubscriptionsApiGetEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntries(requestParameters: SubscriptionsApiGetEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntries(requestParameters.subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription plan change history
         * @param {SubscriptionsApiGetPlanChangeHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlanChangeHistory(requestParameters: SubscriptionsApiGetPlanChangeHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlanChangeHistory(requestParameters.subscriptionId, requestParameters.scope, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pause a subscription
         * @param {SubscriptionsApiPauseSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseSubscription(requestParameters: SubscriptionsApiPauseSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const pauseSubscriptionRequest: PauseSubscriptionRequest = {
                pausePeriodCount: requestParameters.pausePeriodCount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseSubscription(requestParameters.subscriptionId, pauseSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Preview a proposed prorated plan change
         * @param {SubscriptionsApiPreviewPlanChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewPlanChange(requestParameters: SubscriptionsApiPreviewPlanChangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const estimateSubscriptionRequest: EstimateSubscriptionRequest = {
                subscription: requestParameters.subscription,
                product: requestParameters.product,
                quantity: requestParameters.quantity,
                pricing: requestParameters.pricing,
                addons: requestParameters.addons
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewPlanChange(estimateSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rebill a managed subscription
         * @param {SubscriptionsApiRebillManagedSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rebillManagedSubscription(requestParameters: SubscriptionsApiRebillManagedSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.rebillManagedSubscription(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a scheduled pause
         * @param {SubscriptionsApiRemoveScheduledPauseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeScheduledPause(requestParameters: SubscriptionsApiRemoveScheduledPauseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeScheduledPause(requestParameters.subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resume a canceled subscription
         * @param {SubscriptionsApiResumeSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeSubscription(requestParameters: SubscriptionsApiResumeSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const uncancelasubscriptionpriortodeactivationRequest: UncancelasubscriptionpriortodeactivationRequest = {
                subscriptions: requestParameters.subscriptions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeSubscription(requestParameters.subscriptionId, uncancelasubscriptionpriortodeactivationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a subscription
         * @param {SubscriptionsApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscription(requestParameters: SubscriptionsApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const changetheproductforanactivesubscriptionRequest: ChangetheproductforanactivesubscriptionRequest = {
                subscriptions: requestParameters.subscriptions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscription(changetheproductforanactivesubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel a subscription
         * @param {SubscriptionsApiCancelSubscriptionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscriptionById(requestParameters: SubscriptionsApiCancelSubscriptionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.cancelSubscriptionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Convert an Expired Trial Subscription without a Payment Method
         * @param {SubscriptionsApiConvertExpiredTrialWithoutPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertExpiredTrialWithoutPaymentMethod(requestParameters: SubscriptionsApiConvertExpiredTrialWithoutPaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.convertExpiredTrialWithoutPaymentMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptions(options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAllSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a subscription
         * @param {SubscriptionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: SubscriptionsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription entries
         * @param {SubscriptionsApiGetEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntries(requestParameters: SubscriptionsApiGetEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription plan change history
         * @param {SubscriptionsApiGetPlanChangeHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlanChangeHistory(requestParameters: SubscriptionsApiGetPlanChangeHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPlanChangeHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pause a subscription
         * @param {SubscriptionsApiPauseSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription(requestParameters: SubscriptionsApiPauseSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.pauseSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Preview a proposed prorated plan change
         * @param {SubscriptionsApiPreviewPlanChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewPlanChange(requestParameters: SubscriptionsApiPreviewPlanChangeRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.previewPlanChange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rebill a managed subscription
         * @param {SubscriptionsApiRebillManagedSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rebillManagedSubscription(requestParameters: SubscriptionsApiRebillManagedSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rebillManagedSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a scheduled pause
         * @param {SubscriptionsApiRemoveScheduledPauseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeScheduledPause(requestParameters: SubscriptionsApiRemoveScheduledPauseRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.removeScheduledPause(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resume a canceled subscription
         * @param {SubscriptionsApiResumeSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription(requestParameters: SubscriptionsApiResumeSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resumeSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a subscription
         * @param {SubscriptionsApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(requestParameters: SubscriptionsApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelSubscriptionById operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiCancelSubscriptionByIdRequest
 */
export type SubscriptionsApiCancelSubscriptionByIdRequest = {
    
    /**
    * Subscription Id
    * @type {string}
    * @memberof SubscriptionsApiCancelSubscriptionById
    */
    readonly subscriptionId: string
    
}

/**
 * Request parameters for convertExpiredTrialWithoutPaymentMethod operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiConvertExpiredTrialWithoutPaymentMethodRequest
 */
export type SubscriptionsApiConvertExpiredTrialWithoutPaymentMethodRequest = {
    
    /**
    * Subscription Id
    * @type {string}
    * @memberof SubscriptionsApiConvertExpiredTrialWithoutPaymentMethod
    */
    readonly subscriptionId: string
    
}

/**
 * Request parameters for getById operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetByIdRequest
 */
export type SubscriptionsApiGetByIdRequest = {
    
    /**
    * Subscription Id
    * @type {string}
    * @memberof SubscriptionsApiGetById
    */
    readonly subscriptionId: string
    
    /**
    * specify a specific customer account whose subscriptions you want to retrieve
    * @type {string}
    * @memberof SubscriptionsApiGetById
    */
    readonly accountId?: string
    
    /**
    * specify the beginning of a date range in yyyy-mm-dd-format
    * @type {string}
    * @memberof SubscriptionsApiGetById
    */
    readonly begin?: string
    
    /**
    * specify the end of a date range in yyyy-mm-dd format
    * @type {string}
    * @memberof SubscriptionsApiGetById
    */
    readonly end?: string
    
    /**
    * In each event, use begin and end to retrieve the corresponding subscriptions
    * @type {string}
    * @memberof SubscriptionsApiGetById
    */
    readonly event?: string
    
    /**
    * enter one or more product ids to filter the response to include only subscriptions for the specified products; use commas to separate multiple values
    * @type {string}
    * @memberof SubscriptionsApiGetById
    */
    readonly products?: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionsApiGetById
    */
    readonly scope?: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionsApiGetById
    */
    readonly status?: string
    
}

/**
 * Request parameters for getEntries operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetEntriesRequest
 */
export type SubscriptionsApiGetEntriesRequest = {
    
    /**
    * Subscription Id
    * @type {string}
    * @memberof SubscriptionsApiGetEntries
    */
    readonly subscriptionId: string
    
}

/**
 * Request parameters for getPlanChangeHistory operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetPlanChangeHistoryRequest
 */
export type SubscriptionsApiGetPlanChangeHistoryRequest = {
    
    /**
    * Subscription Id
    * @type {string}
    * @memberof SubscriptionsApiGetPlanChangeHistory
    */
    readonly subscriptionId: string
    
    /**
    * Type of items to return
    * @type {'base_plan' | 'add_on'}
    * @memberof SubscriptionsApiGetPlanChangeHistory
    */
    readonly scope?: 'base_plan' | 'add_on'
    
    /**
    * Sort Order for the results
    * @type {'increasing' | 'decreasing'}
    * @memberof SubscriptionsApiGetPlanChangeHistory
    */
    readonly order?: 'increasing' | 'decreasing'
    
}

/**
 * Request parameters for pauseSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiPauseSubscriptionRequest
 */
export type SubscriptionsApiPauseSubscriptionRequest = {
    
    /**
    * Subscription Id
    * @type {string}
    * @memberof SubscriptionsApiPauseSubscription
    */
    readonly subscriptionId: string
    
} & PauseSubscriptionRequest

/**
 * Request parameters for previewPlanChange operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiPreviewPlanChangeRequest
 */
export type SubscriptionsApiPreviewPlanChangeRequest = {
    
} & EstimateSubscriptionRequest

/**
 * Request parameters for rebillManagedSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiRebillManagedSubscriptionRequest
 */
export type SubscriptionsApiRebillManagedSubscriptionRequest = any

/**
 * Request parameters for removeScheduledPause operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiRemoveScheduledPauseRequest
 */
export type SubscriptionsApiRemoveScheduledPauseRequest = {
    
    /**
    * Subscription Id
    * @type {string}
    * @memberof SubscriptionsApiRemoveScheduledPause
    */
    readonly subscriptionId: string
    
}

/**
 * Request parameters for resumeSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiResumeSubscriptionRequest
 */
export type SubscriptionsApiResumeSubscriptionRequest = {
    
    /**
    * Subscription Id
    * @type {string}
    * @memberof SubscriptionsApiResumeSubscription
    */
    readonly subscriptionId: string
    
} & UncancelasubscriptionpriortodeactivationRequest

/**
 * Request parameters for updateSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiUpdateSubscriptionRequest
 */
export type SubscriptionsApiUpdateSubscriptionRequest = {
    
} & ChangetheproductforanactivesubscriptionRequest

/**
 * SubscriptionsApiGenerated - object-oriented interface
 * @export
 * @class SubscriptionsApiGenerated
 * @extends {BaseAPI}
 */
export class SubscriptionsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Cancel a subscription
     * @param {SubscriptionsApiCancelSubscriptionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public cancelSubscriptionById(requestParameters: SubscriptionsApiCancelSubscriptionByIdRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).cancelSubscriptionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Convert an Expired Trial Subscription without a Payment Method
     * @param {SubscriptionsApiConvertExpiredTrialWithoutPaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public convertExpiredTrialWithoutPaymentMethod(requestParameters: SubscriptionsApiConvertExpiredTrialWithoutPaymentMethodRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).convertExpiredTrialWithoutPaymentMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all subscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public getAllSubscriptions(options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getAllSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a subscription
     * @param {SubscriptionsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public getById(requestParameters: SubscriptionsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription entries
     * @param {SubscriptionsApiGetEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public getEntries(requestParameters: SubscriptionsApiGetEntriesRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription plan change history
     * @param {SubscriptionsApiGetPlanChangeHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public getPlanChangeHistory(requestParameters: SubscriptionsApiGetPlanChangeHistoryRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getPlanChangeHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pause a subscription
     * @param {SubscriptionsApiPauseSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public pauseSubscription(requestParameters: SubscriptionsApiPauseSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).pauseSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Preview a proposed prorated plan change
     * @param {SubscriptionsApiPreviewPlanChangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public previewPlanChange(requestParameters: SubscriptionsApiPreviewPlanChangeRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).previewPlanChange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rebill a managed subscription
     * @param {SubscriptionsApiRebillManagedSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public rebillManagedSubscription(requestParameters: SubscriptionsApiRebillManagedSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).rebillManagedSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a scheduled pause
     * @param {SubscriptionsApiRemoveScheduledPauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public removeScheduledPause(requestParameters: SubscriptionsApiRemoveScheduledPauseRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).removeScheduledPause(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resume a canceled subscription
     * @param {SubscriptionsApiResumeSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public resumeSubscription(requestParameters: SubscriptionsApiResumeSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).resumeSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a subscription
     * @param {SubscriptionsApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiGenerated
     */
    public updateSubscription(requestParameters: SubscriptionsApiUpdateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).updateSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
